{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-04T21:49:17.032Z",
    "end": "2024-10-04T21:49:18.355Z",
    "duration": 1323,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6e7c37fc-fa78-4f72-85ef-2ed6ab4dbedc",
      "title": "",
      "fullFile": "/Users/mymac/Documents/Polestar-Digital/Polystar-digital/api-tests/userDetails.js",
      "file": "/api-tests/userDetails.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "08628667-eac6-4b56-8091-904c90cdd794",
          "title": "Users API Tests",
          "fullFile": "/Users/mymac/Documents/Polestar-Digital/Polystar-digital/api-tests/userDetails.js",
          "file": "/api-tests/userDetails.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - List User Response",
              "fullTitle": "Users API Tests GET - List User Response",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await reqres\n    .get(`/api/users?page=2`)\n    .then(response => {\n        return response;\n    });\nconsole.log('Status Code is: ' + response.status);\nexpect(response.status, 'Status Successful').to.equal(200);\nconsole.log('URL is: ' + response.body.total_pages);\nexpect(response.body.total_pages, 'Total Pages').to.equal(2);",
              "err": {},
              "uuid": "e09c5ec8-2365-4056-b6d2-668db02bf539",
              "parentUUID": "08628667-eac6-4b56-8091-904c90cdd794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Single User Response",
              "fullTitle": "Users API Tests GET - Single User Response",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await reqres\n    .get(`/api/users/2`)\n    .then(response => {\n        return response;\n    });\nconsole.log('Status Code is: ' + response.status);\nexpect(response.status, 'Status Successful').to.equal(200);\nconsole.log('URL is: ' + response.body.data.id);\nexpect(response.body.data.id, 'Id Equals').to.equal(2);",
              "err": {},
              "uuid": "909e90a4-0f92-4a6d-ac7e-38833397a862",
              "parentUUID": "08628667-eac6-4b56-8091-904c90cdd794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Single User Not Found Response",
              "fullTitle": "Users API Tests GET - Single User Not Found Response",
              "timedOut": false,
              "duration": 435,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await reqres\n    .get(`/api/users/23`)\n    .then(response => {\n        return response;\n    });\nconsole.log('Status Code is: ' + response.status);\nexpect(response.status, 'Status Successful').to.equal(404);",
              "err": {},
              "uuid": "1ed8182f-42fd-45bd-9f48-144762239b90",
              "parentUUID": "08628667-eac6-4b56-8091-904c90cdd794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - List of User Response",
              "fullTitle": "Users API Tests GET - List of User Response",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await reqres\n    .get(`/api/unknown`)\n    .then(response => {\n        return response;\n    });\nconsole.log('Status Code is: ' + response.status);\nexpect(response.status, 'Status Successful').to.equal(200);\nconsole.log('No. of pages: ' + response.body.page);\nexpect(response.body.page, 'Pages Equals').to.equal(1);\nconsole.log('Per Page: ' + response.body.per_page);\nexpect(response.body.per_page, 'Per Page Equals').to.equal(6);\nconsole.log('Total is: ' + response.body.total);\nexpect(response.body.total, 'Total Equals').to.equal(12);\nconsole.log('Id is: ' + response.body.data[0].name);\nexpect(response.body.data[0].name, 'Name Contains').to.contains(\"cerulean\");",
              "err": {},
              "uuid": "e51a2a1b-b8b2-4988-80ce-2788b25ca14f",
              "parentUUID": "08628667-eac6-4b56-8091-904c90cdd794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Create User Response",
              "fullTitle": "Users API Tests POST - Create User Response",
              "timedOut": false,
              "duration": 412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await reqres\n    .post(`/api/users`)\n    .send({\n        \"name\": randomName,\n        \"job\": randomJob\n    })\n    .then(response => {\n        return response;\n    });\nconsole.log('Status Code is: ' + response.status);\nexpect(response.status, 'Status Successful').to.equal(201);\nconsole.log('Name is: ' + response.body.name);\nexpect(response.body.name, 'Name Contains').to.contains(randomName);\nconsole.log('Job is: ' + response.body.job);\nexpect(response.body.job, 'Job Contains').to.contains(randomJob);",
              "err": {},
              "uuid": "c6a5af9f-df3f-4abf-b93d-1498add7df49",
              "parentUUID": "08628667-eac6-4b56-8091-904c90cdd794",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e09c5ec8-2365-4056-b6d2-668db02bf539",
            "909e90a4-0f92-4a6d-ac7e-38833397a862",
            "1ed8182f-42fd-45bd-9f48-144762239b90",
            "e51a2a1b-b8b2-4988-80ce-2788b25ca14f",
            "c6a5af9f-df3f-4abf-b93d-1498add7df49"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1319,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}